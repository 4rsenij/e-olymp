#include <iostream>
#include <math.h>
#include <vector>

using namespace std;

const int MAXN = 1001;
int n, s, f[MAXN], q[MAXN];
vector <pair<int, int> > a[MAXN][2];

bool dfs(int t, int k)
{
	int x, y;
	q[++s] = t;
	f[t] = k;
	for (int i = a[t][k].size() - 1; i >= 0; --i) {
		x = a[t][k][i].first;
		y = a[t][k][i].second;
		if (f[x] != -1 && f[x] == y) return 0;
		if (f[x] == -1 && !dfs(x, 1 ^ y)) return 0;
	}
	return 1;
}

bool ok(int t, int k)
{
	s = 0;
	if (!dfs(t, k)) {
		for (int i = 1; i <= s; ++i) f[q[i]] = -1;
		return 0;
	}
	return 1;
}

void work()
{
	for (int i = 1; i <= n; ++i)
		if (f[i] < 0 && !ok(i, 1) && (i == 1 || !ok(i, 0)))
		{
			puts("no");
			return;
		}

	puts("yes");
}

int main()
{
	int m, x, y, k1, k2;
	while (cin >> n >> m) {
		for (int i = 1; i <= n; ++i)
			for (int j = 0; j <= 1; ++j) a[i][j].clear();

		for (int i = 1; i <= m; ++i) {
			scanf("%d%d", &x, &y);
			k1 = k2 = 0;
			if (x < 0) x = abs(x), k1 = 1;
			if (y < 0) y = abs(y), k2 = 1;
			a[x][k1].push_back(make_pair(y, k2));
			a[y][k2].push_back(make_pair(x, k1));
		}
		for (int i = 1; i <= n; ++i) f[i] = -1;
		work();
	}
	return 0;
}
